# This solution works fine !!!
class Solution:
    
    def run(self, n, m, movies):
        if n < 1 or m > 100000 or m < 1 or len(movies) < 1: return None
        movies_array = None
        moviesStack = list(range(1, n+1))
        locations = {}
        for i in range(0, len(moviesStack)):
            locations[moviesStack[i]] = i
        #print("locations : ", locations)
        
        # Watch movies
        for i in range(0, len(movies)):
            posOfTheMovie = locations[movies[i]]
            #print("Watching movie: ", movies[i] , " at the location " , locations[movies[i]])
            if movies_array == None:
                movies_array = str(posOfTheMovie)
            else:
                 movies_array += ',' + str(posOfTheMovie)
            #print("moviesStack before : ", moviesStack)
            for pos in reversed(range(posOfTheMovie+1)):
                if pos > 0:
                    moviesStack[pos]= moviesStack[pos-1]
                    # Update locations
                    locations[moviesStack[pos]] += 1
            moviesStack[0] = movies[i]
            locations[movies[i]] = 0 
            #print("moviesStack after : ", moviesStack)
            
                
        return movies_array

# if __name__ == "__main__":
#     solution = Solution()
#     test1 = solution.run(3, 3, [3,1,1])
#     print('\ntest1 expected : 2,1,0')
#     print('test1 actual   : ' , test1)
#     print('PASS\n') if test1 == "2,1,0" else print("FAIL\n") 

    
#     test2 = solution.run(5, 3, [4,4,5])
#     print('\ntest2 expected : 3,0,4')
#     print('test2 actual   :' , test2)
#     print('PASS\n') if test2 == "3,0,4" else print("FAIL\n") 
    
#     movies = [10,20,30,32,11,73,58,74,3,20,63,68,84,71,25,79,17,17,60,57,76,10,3,27,27,56,44,20,6,43,67,55,18,52,2,29,80,59,58,82,34,36,21,74,63,45,24,79,18,83,8,9,9,10,75,75,65,74,10,70,33,76,81,6,83,82,74,78,13,4,31,46,39,52,75,57,52,15,8,25,13,15,33,61,64,24,51,44,13,61,69,1,8,65,47,7,19,36,40,71,39,71,72,34,78,63,46,1,77,9,26,45,63,14,22,42,77,72,41,46,4,26,46,12,46,48,58,20,40,53,6,34,79,78,23,72,12,69,29,4,33,54,4,12,67,25,53,60,53,10,61,12,75,62,63,76,26,36,12,65,45,57,14,39,50,77,27,17,61,11,60,9,64,64,60,2,4,29,17,12,78,77,24,24,55,2,15,80,78,26,16,38,39,69,76,4,61,58,21,77,68,80,42,3,15,17,5,59,1,61,70,34,54,49,57,64,7,72,15,84,53,30,77,7,54,24,51,71,82,27,19,21,62,16,64,77,33,24,51,73,84,76,23,9,41,35,72,47,22,2,2,31,71,78,37,81,17,43,67,54,69,41,31,3,57,10,79,45,73,1,33,72,76,11,81,72,46,24,34,23,26,75,53,52,68,6,48,41,4,70,50,73,27,80,75,39,45,25,83,33,25,31,61,56,82,13,44,43,36,33,65,17,64,34,69,3,79,72,43,82,14,49,26,80,84,56,34,45,80,32,33,60,18,49,72,15,61,71,13,53,59,78,69,38,67,9,41,61,81,39,14,10,3,80,5,3,51,78,3,3,25,75,18,82,40,5,13,56,75,65,24,6,58,9,43,80,17,83,12,53,38,26,18,80,21,62,38,27,55,40,29,35,71,3,33,26,7,1,37,38,65,61,43,79,25,1,74,81,40,2,50,33,67,67,68,43,45,22,69,55,61,54,6,47,56,38,28,18,78,65,55,58,81,53,8,21,10,82,17,49,39,22,37,21,45,20,63,45,41,3,15,58,56,20,60,27,13,4,45,6,24,55,20,60,24,27,80,33,64,52,37,18,74,73,78,74,48,56,34,5,59,48,18,70,24,77,13,36,36,13,82,59,67,57,34,46,39,69,78,19,37,70,76,66,58,70,55,22,81,4,66,55,7,83,41,30,75,9,22,27,21,59,41,43,31,31,5,69,55,38,43,47,24,35,28,37,60,38,14,56,81,35,67,44,33,63,73,64,27,50,46,3,24,42,45,10,28,5,35,83,83,77,45,22,67,29,14,42,22,68,54,19,18,76,62,51,54,6,70,80,56,31,82,35,28,82,1,56,3,35,54,1,67,54,62,50,82,31,47,20,14,56,78,32,47,11,38,56,16,23,7,27,9,44,18,76,42,18,47,84,8,56,40,74,66,57,79,63,3,42,38,17,53,71,4,16,81,41,27,53,19,34,79,67,77,52,58,74,69,61,73,76,72,68,22,53,40,16,72,83,57,65,55,66,52,58,81,4,54,63,56,28,12,7,50,5,58,63,34,83,39,23,30,27,46,51,35,2,67,22,84,79,3,10,60,54,67,12,57,76,75,69,19,42,75,24,2,4,2,36,2,81,58,32,63,19,38,13,60,60,35,15,55,37,24,70,46,46,38,58,37,68,42,11,25,72,34,27,76,36,62,33,32,75,20,10,49,58,62,25,33,12,79,43,4,19,69,5,20,22,63,57,5,60,67,29,4,57,11,35,48,72,67,79,62,3,44,67,16,21,7,4,73,41,47,76,15,31,81,35,8,15,7,52,30,29,80,33,41,7,67,4,34,6,82,52,8,81,34,23,18,80,26,6,36,28,37,51,14,73,1,61,43,47,28,73,31,24,61,72,70,84,75,19,5,29,26,52,25,59,30,82,54,11,43,6,79,80,12,8,68,12,69,27,14,52,55,44,75,71,31,16,70,22,75,30,50,16,81,30,75,66,28,84,77,70,5,71,65,16,34,5,67,58,71,80,26];
#     expected = "9,19,29,31,13,72,58,73,10,7,64,69,83,73,33,79,28,0,66,65,77,18,12,39,0,66,55,15,26,55,73,67,38,65,29,47,80,69,27,82,53,55,47,31,31,62,51,29,15,83,43,44,0,28,80,0,76,11,3,79,59,33,83,29,11,20,8,83,52,49,61,69,66,32,17,41,2,57,21,45,10,3,18,77,79,27,76,43,7,5,81,57,11,28,74,60,64,38,72,55,22,1,82,42,28,41,27,14,83,39,70,43,6,67,69,76,7,12,76,11,37,10,2,70,1,77,51,59,21,80,46,21,52,22,74,15,12,32,57,16,40,81,2,5,61,44,14,66,1,56,40,6,49,82,31,56,27,38,6,42,35,51,36,40,82,36,67,69,16,73,20,42,53,0,2,66,26,29,8,17,33,12,54,0,67,8,56,67,6,24,77,81,21,37,28,16,21,45,68,16,74,13,51,73,16,21,78,72,56,12,71,50,46,82,37,32,61,50,13,76,48,79,21,6,10,34,68,63,72,43,65,28,51,36,17,12,56,11,11,78,17,35,58,47,65,81,24,68,68,47,0,73,23,48,82,77,40,79,66,30,49,15,10,44,37,65,67,62,25,45,29,22,26,60,18,3,72,31,45,30,57,67,45,76,55,70,73,24,59,53,66,21,49,59,12,61,25,71,78,26,2,32,59,80,56,77,78,41,74,9,74,44,56,31,43,43,41,37,10,13,74,65,36,25,56,19,12,24,4,81,18,75,81,10,14,68,25,55,26,42,69,56,24,73,56,62,43,10,51,38,26,55,31,23,71,2,64,14,2,0,40,42,24,33,78,8,22,32,6,39,54,51,74,22,39,17,42,46,76,31,29,42,19,7,71,71,5,50,76,22,77,71,39,28,44,13,75,66,69,12,26,39,23,52,34,7,81,41,17,71,60,15,45,0,64,11,54,72,49,25,16,72,38,73,42,22,82,35,47,25,10,42,22,38,82,38,50,49,44,57,53,22,35,7,24,82,82,2,56,41,58,17,24,7,60,47,55,70,10,30,55,25,8,8,3,8,52,39,65,72,20,32,45,70,34,2,72,19,67,62,65,4,8,72,16,78,24,71,0,1,36,8,50,78,12,76,37,50,18,80,21,15,79,83,35,3,32,41,47,37,6,4,62,69,42,82,72,72,10,39,47,25,7,59,79,0,35,23,14,57,5,58,35,70,59,26,47,7,75,42,26,7,36,79,48,55,47,49,24,65,40,56,18,83,56,60,21,26,16,35,0,50,6,33,19,74,23,11,4,67,66,46,54,47,75,77,5,62,49,61,33,41,56,21,23,2,72,5,27,5,10,4,21,2,13,29,8,10,40,63,23,12,55,79,5,82,42,5,83,83,56,39,54,45,29,29,33,2,12,83,72,12,77,69,61,66,79,51,33,12,20,74,75,81,67,24,57,63,24,6,45,70,14,39,51,74,70,21,66,78,62,31,83,54,55,15,29,20,5,58,29,79,69,32,17,17,25,26,51,33,34,54,83,43,52,62,10,7,31,17,75,47,75,36,67,63,60,81,38,31,48,40,47,67,71,25,7,23,32,38,76,42,45,50,3,70,16,33,1,78,1,35,30,59,31,10,53,78,19,0,25,80,42,76,15,71,31,0,9,13,5,50,20,63,82,49,41,37,27,24,70,77,24,28,69,35,82,17,7,13,8,34,38,79,34,31,35,47,13,42,35,38,4,35,39,77,10,5,27,37,82,29,7,16,20,43,70,4,58,82,54,13,62,66,70,35,46,75,49,18,71,4,10,62,56,24,78,35,13,6,18,16,44,79,78,11,13,15,5,60,75,13,83,9,48,66,53,63,79,27,80,74,47,30,8,5,29,61,6,38,61,66,56,51,47,33,20,27,53,83,36,31,67,48,21,27,47,29,55,35,62,2,56,61,31,16,65,50,23,78,30,51,28,58,5,22,71,5,44,3,4,73,37,33,78,10,33,13,75,11,47,4,49,64,6,27,36";
        
#     test3 = solution.run(84 ,887, movies)
#     print('\ntest2 expected : ', expected)
#     print('test2 actual   :' , test2)
#     print('PASS\n') if test3 == expected else print("FAIL\n") 

from cmath import exp
import unittest

class SolutionMethods(unittest.TestCase):
   
    def test_ONE(self):
        solution = Solution()
        self.assertEqual(solution.run(3,3, [3,1,1]), "2,1,0")
  
    def test_TWO(self):
        solution = Solution()
        self.assertEqual(solution.run(5,3, [4,4,5]), "3,0,4")
        
    def test_Three(self):
        movies = [10,20,30,32,11,73,58,74,3,20,63,68,84,71,25,79,17,17,60,57,76,10,3,27,27,56,44,20,6,43,67,55,18,52,2,29,80,59,58,82,34,36,21,74,63,45,24,79,18,83,8,9,9,10,75,75,65,74,10,70,33,76,81,6,83,82,74,78,13,4,31,46,39,52,75,57,52,15,8,25,13,15,33,61,64,24,51,44,13,61,69,1,8,65,47,7,19,36,40,71,39,71,72,34,78,63,46,1,77,9,26,45,63,14,22,42,77,72,41,46,4,26,46,12,46,48,58,20,40,53,6,34,79,78,23,72,12,69,29,4,33,54,4,12,67,25,53,60,53,10,61,12,75,62,63,76,26,36,12,65,45,57,14,39,50,77,27,17,61,11,60,9,64,64,60,2,4,29,17,12,78,77,24,24,55,2,15,80,78,26,16,38,39,69,76,4,61,58,21,77,68,80,42,3,15,17,5,59,1,61,70,34,54,49,57,64,7,72,15,84,53,30,77,7,54,24,51,71,82,27,19,21,62,16,64,77,33,24,51,73,84,76,23,9,41,35,72,47,22,2,2,31,71,78,37,81,17,43,67,54,69,41,31,3,57,10,79,45,73,1,33,72,76,11,81,72,46,24,34,23,26,75,53,52,68,6,48,41,4,70,50,73,27,80,75,39,45,25,83,33,25,31,61,56,82,13,44,43,36,33,65,17,64,34,69,3,79,72,43,82,14,49,26,80,84,56,34,45,80,32,33,60,18,49,72,15,61,71,13,53,59,78,69,38,67,9,41,61,81,39,14,10,3,80,5,3,51,78,3,3,25,75,18,82,40,5,13,56,75,65,24,6,58,9,43,80,17,83,12,53,38,26,18,80,21,62,38,27,55,40,29,35,71,3,33,26,7,1,37,38,65,61,43,79,25,1,74,81,40,2,50,33,67,67,68,43,45,22,69,55,61,54,6,47,56,38,28,18,78,65,55,58,81,53,8,21,10,82,17,49,39,22,37,21,45,20,63,45,41,3,15,58,56,20,60,27,13,4,45,6,24,55,20,60,24,27,80,33,64,52,37,18,74,73,78,74,48,56,34,5,59,48,18,70,24,77,13,36,36,13,82,59,67,57,34,46,39,69,78,19,37,70,76,66,58,70,55,22,81,4,66,55,7,83,41,30,75,9,22,27,21,59,41,43,31,31,5,69,55,38,43,47,24,35,28,37,60,38,14,56,81,35,67,44,33,63,73,64,27,50,46,3,24,42,45,10,28,5,35,83,83,77,45,22,67,29,14,42,22,68,54,19,18,76,62,51,54,6,70,80,56,31,82,35,28,82,1,56,3,35,54,1,67,54,62,50,82,31,47,20,14,56,78,32,47,11,38,56,16,23,7,27,9,44,18,76,42,18,47,84,8,56,40,74,66,57,79,63,3,42,38,17,53,71,4,16,81,41,27,53,19,34,79,67,77,52,58,74,69,61,73,76,72,68,22,53,40,16,72,83,57,65,55,66,52,58,81,4,54,63,56,28,12,7,50,5,58,63,34,83,39,23,30,27,46,51,35,2,67,22,84,79,3,10,60,54,67,12,57,76,75,69,19,42,75,24,2,4,2,36,2,81,58,32,63,19,38,13,60,60,35,15,55,37,24,70,46,46,38,58,37,68,42,11,25,72,34,27,76,36,62,33,32,75,20,10,49,58,62,25,33,12,79,43,4,19,69,5,20,22,63,57,5,60,67,29,4,57,11,35,48,72,67,79,62,3,44,67,16,21,7,4,73,41,47,76,15,31,81,35,8,15,7,52,30,29,80,33,41,7,67,4,34,6,82,52,8,81,34,23,18,80,26,6,36,28,37,51,14,73,1,61,43,47,28,73,31,24,61,72,70,84,75,19,5,29,26,52,25,59,30,82,54,11,43,6,79,80,12,8,68,12,69,27,14,52,55,44,75,71,31,16,70,22,75,30,50,16,81,30,75,66,28,84,77,70,5,71,65,16,34,5,67,58,71,80,26];
        expected = "9,19,29,31,13,72,58,73,10,7,64,69,83,73,33,79,28,0,66,65,77,18,12,39,0,66,55,15,26,55,73,67,38,65,29,47,80,69,27,82,53,55,47,31,31,62,51,29,15,83,43,44,0,28,80,0,76,11,3,79,59,33,83,29,11,20,8,83,52,49,61,69,66,32,17,41,2,57,21,45,10,3,18,77,79,27,76,43,7,5,81,57,11,28,74,60,64,38,72,55,22,1,82,42,28,41,27,14,83,39,70,43,6,67,69,76,7,12,76,11,37,10,2,70,1,77,51,59,21,80,46,21,52,22,74,15,12,32,57,16,40,81,2,5,61,44,14,66,1,56,40,6,49,82,31,56,27,38,6,42,35,51,36,40,82,36,67,69,16,73,20,42,53,0,2,66,26,29,8,17,33,12,54,0,67,8,56,67,6,24,77,81,21,37,28,16,21,45,68,16,74,13,51,73,16,21,78,72,56,12,71,50,46,82,37,32,61,50,13,76,48,79,21,6,10,34,68,63,72,43,65,28,51,36,17,12,56,11,11,78,17,35,58,47,65,81,24,68,68,47,0,73,23,48,82,77,40,79,66,30,49,15,10,44,37,65,67,62,25,45,29,22,26,60,18,3,72,31,45,30,57,67,45,76,55,70,73,24,59,53,66,21,49,59,12,61,25,71,78,26,2,32,59,80,56,77,78,41,74,9,74,44,56,31,43,43,41,37,10,13,74,65,36,25,56,19,12,24,4,81,18,75,81,10,14,68,25,55,26,42,69,56,24,73,56,62,43,10,51,38,26,55,31,23,71,2,64,14,2,0,40,42,24,33,78,8,22,32,6,39,54,51,74,22,39,17,42,46,76,31,29,42,19,7,71,71,5,50,76,22,77,71,39,28,44,13,75,66,69,12,26,39,23,52,34,7,81,41,17,71,60,15,45,0,64,11,54,72,49,25,16,72,38,73,42,22,82,35,47,25,10,42,22,38,82,38,50,49,44,57,53,22,35,7,24,82,82,2,56,41,58,17,24,7,60,47,55,70,10,30,55,25,8,8,3,8,52,39,65,72,20,32,45,70,34,2,72,19,67,62,65,4,8,72,16,78,24,71,0,1,36,8,50,78,12,76,37,50,18,80,21,15,79,83,35,3,32,41,47,37,6,4,62,69,42,82,72,72,10,39,47,25,7,59,79,0,35,23,14,57,5,58,35,70,59,26,47,7,75,42,26,7,36,79,48,55,47,49,24,65,40,56,18,83,56,60,21,26,16,35,0,50,6,33,19,74,23,11,4,67,66,46,54,47,75,77,5,62,49,61,33,41,56,21,23,2,72,5,27,5,10,4,21,2,13,29,8,10,40,63,23,12,55,79,5,82,42,5,83,83,56,39,54,45,29,29,33,2,12,83,72,12,77,69,61,66,79,51,33,12,20,74,75,81,67,24,57,63,24,6,45,70,14,39,51,74,70,21,66,78,62,31,83,54,55,15,29,20,5,58,29,79,69,32,17,17,25,26,51,33,34,54,83,43,52,62,10,7,31,17,75,47,75,36,67,63,60,81,38,31,48,40,47,67,71,25,7,23,32,38,76,42,45,50,3,70,16,33,1,78,1,35,30,59,31,10,53,78,19,0,25,80,42,76,15,71,31,0,9,13,5,50,20,63,82,49,41,37,27,24,70,77,24,28,69,35,82,17,7,13,8,34,38,79,34,31,35,47,13,42,35,38,4,35,39,77,10,5,27,37,82,29,7,16,20,43,70,4,58,82,54,13,62,66,70,35,46,75,49,18,71,4,10,62,56,24,78,35,13,6,18,16,44,79,78,11,13,15,5,60,75,13,83,9,48,66,53,63,79,27,80,74,47,30,8,5,29,61,6,38,61,66,56,51,47,33,20,27,53,83,36,31,67,48,21,27,47,29,55,35,62,2,56,61,31,16,65,50,23,78,30,51,28,58,5,22,71,5,44,3,4,73,37,33,78,10,33,13,75,11,47,4,49,64,6,27,36";
        solution = Solution()
        self.assertEqual(solution.run(84, 887, movies), expected)
        
    def test_Four(self):
        movies = [2,18,29,1]
        expected = "1,17,28,3"
        solution = Solution()
        self.assertEqual(solution.run(40, 4, movies), expected)
        
    def test_Five_shouldReturnWhenZeroMoviesIsWatched(self):
        movies = [2,18,29,1]
        solution = Solution()
        self.assertEqual(solution.run(40, 0, movies), None)
        
    def test_should_ReturnNone_when_MoviesListIsEmpty(self):
        movies = []
        solution = Solution()
        self.assertEqual(solution.run(40, 2, movies), None)

if __name__ == "__main__":
	unittest.main()